name: Python Application CI

on:
  push:
    branches: [ "main" ] # main 브랜치에 푸시될 때 실행
    tags:
      - 'v*' # 'v'로 시작하는 태그가 푸시될 때 실행 (릴리즈용)
  pull_request:
    branches: [ "main" ] # main 브랜치로의 풀리퀘스트 시 실행 (테스트용)

jobs:
  build-windows: # Windows용 exe 빌드 작업
    runs-on: windows-latest # Windows 실행 환경 사용
    steps:
    - uses: actions/checkout@v4 # 코드 가져오기

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11' # 사용할 파이썬 버전 지정

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller google-generativeai # 필요한 라이브러리 명시
        # 또는 requirements.txt 파일이 있다면:
        # pip install -r requirements.txt

    - name: Build with PyInstaller
      run: |
        pyinstaller --name MnbTranslator --onefile --windowed --icon="assets/app_icon.ico" --add-data "data:data" --add-data "assets:assets" main.py
        # 프로젝트 구조와 main 스크립트 이름에 맞게 수정

    - name: Upload artifact # 빌드 결과물을 GitHub Actions 아티팩트로 업로드
      uses: actions/upload-artifact@v4
      with:
        name: MnbTranslator-Windows-exe # 아티팩트 이름
        path: dist/MnbTranslator.exe # PyInstaller가 생성한 exe 파일 경로 (--onefile 경우)
        # 만약 --onedir 모드라면:
        # path: dist/MnbTranslator # 폴더 전체를 업로드

  create-release: # 태그가 푸시될 때만 실행되는 릴리즈 작업
    needs: build-windows # build-windows 작업이 성공해야 실행
    if: startsWith(github.ref, 'refs/tags/') # 태그가 푸시된 경우에만 이 작업 실행
    runs-on: ubuntu-latest # 릴리즈 생성 작업은 어떤 OS에서든 무방
    permissions:
      contents: write # 릴리즈를 생성하고 에셋을 업로드하기 위한 권한
    steps:
      - name: Download Windows artifact # 빌드된 exe 다운로드
        uses: actions/download-artifact@v4
        with:
          name: MnbTranslator-Windows-exe
          path: dist_exe # 다운로드 받을 경로

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub에서 자동으로 제공하는 토큰
        with:
          tag_name: ${{ github.ref_name }} # 태그 이름 (예: v1.0.0)
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Release Asset (Windows EXE)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # Create Release 단계에서 생성된 업로드 URL
          asset_path: ./dist_exe/MnbTranslator.exe # 업로드할 파일 경로
          asset_name: MnbTranslator-Windows-${{ github.ref_name }}.exe # 릴리즈에 표시될 에셋 이름
          asset_content_type: application/octet-stream
