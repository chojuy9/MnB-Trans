name: Python Application CI

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11' # 사용하는 파이썬 버전

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller google-generativeai # Pillow 등 다른 라이브러리도 필요하면 추가
        # 또는 requirements.txt 사용:
        # pip install -r requirements.txt

    - name: Build with PyInstaller (onedir) # 단계 이름에 (onedir) 추가하여 명시
      run: |
        pyinstaller --name MnbTranslator --onedir --windowed --icon="assets/app_icon.ico" --add-data "data:data" --add-data "assets:assets" main.py
        # '--onefile' 옵션을 '--onedir'로 변경했습니다.

    - name: Archive build artifacts (Windows) # 아티팩트 이름 및 경로 수정
      uses: actions/upload-artifact@v4
      with:
        name: MnbTranslator-Windows-dir # 아티팩트 이름에 -dir 추가하여 구분
        path: dist/MnbTranslator # '--onedir'로 빌드하면 'dist/YourAppName' 폴더가 생성됨

  create-release:
    needs: build-windows
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest # 릴리즈 생성은 OS 무관
    permissions:
      contents: write
    steps:
      - name: Download Windows artifact (directory) # 아티팩트 이름 및 다운로드 경로 수정
        uses: actions/download-artifact@v4
        with:
          name: MnbTranslator-Windows-dir # 위에서 업로드한 아티팩트 이름과 일치
          path: dist_build # 다운로드 받을 임시 폴더 이름

      # --onedir로 빌드된 결과는 폴더이므로, 압축하여 릴리즈에 첨부하는 것이 일반적입니다.
      - name: Create archive of the build directory
        run: |
          cd dist_build/MnbTranslator # PyInstaller가 생성한 폴더로 이동 (MnbTranslator 폴더 안으로)
          zip -r ../MnbTranslator-Windows-${{ github.ref_name }}.zip . # 현재 폴더 내용을 zip으로 압축 (한 단계 상위 폴더에 생성)
          # Windows Runner에서는 zip 명령 대신 PowerShell의 Compress-Archive 사용 가능
          # (runs-on: windows-latest 로 변경하고)
          # Compress-Archive -Path dist_build/MnbTranslator/* -DestinationPath dist_build/MnbTranslator-Windows-${{ github.ref_name }}.zip
        # 위 zip 명령은 Ubuntu/macOS Runner에서 잘 동작합니다.
        # 현재 create-release 작업은 ubuntu-latest에서 실행되므로 zip 명령 사용이 적절합니다.

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Release Asset (Windows ZIP) # 업로드할 에셋 경로 및 이름 수정
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist_build/MnbTranslator-Windows-${{ github.ref_name }}.zip # 압축된 zip 파일 경로
          asset_name: MnbTranslator-Windows-${{ github.ref_name }}.zip # 릴리즈에 표시될 zip 파일 이름
          asset_content_type: application/zip